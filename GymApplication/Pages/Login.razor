@page "/login"
@using GymApplication.Models;
@using GymApplication.Services;
@inject NavigationManager NavigationManager;
@inject AdminService adminService

<h1 style="text-align:center; margin-top:50px;">Administrator Login</h1>

<EditForm Model="@loginModel" OnValidSubmit="SubmitForm" class="form-container">

    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="email">Email address</label>
        <input type="email" @bind="loginModel.Email" class="form-control" placeholder="Enter email" id="email" />
        <ValidationMessage For="@(()=> loginModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" @bind="loginModel.Password" class="form-control" placeholder="Enter password" id="password">
        <ValidationMessage For="@(()=> loginModel.Password)" />
    </div>

    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <i class="oi oi-account-login"></i> Sign in
        </button>
    </div>
</EditForm>

@code {
    LoginModel loginModel = new()
        {
            Email = "",
            Password = ""
        }; // This is just to prefill the login information to make debugging less annoying


    private async Task SubmitForm()
    {
        var admins = await adminService.GetAdminAsync();
        var admin = admins.FirstOrDefault(a => a.AdminEmail == loginModel.Email && a.AdminPassword == loginModel.Password);

        try
        {
            if (admin != null)
            {
                LoginModel.isAuthenticated = true;
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                    LoginModel.isAuthenticated = false;
                    loginModel.Password = "";
                    StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        // Check if any admin account exists in the database, if not then create a default account
        if (admins.Count() == 0)
        {
            var defaultAdmin = new GymApplication.Data.AdminInfo { AdminId = 0, AdminEmail = "admin@example.ca", AdminPassword = "password" };
            await adminService.AddUpdateAdminAsync(defaultAdmin);
            admin = defaultAdmin;
        }
    }
}

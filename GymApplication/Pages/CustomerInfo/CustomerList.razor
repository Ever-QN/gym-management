@page "/customerList"
@using GymApplication.Services
@using GymApplication.Data
@inject CustomerService customerService
@inject NavigationManager navigationManager


<h3>Manage Customers</h3>

@if (customerList == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<button class="btn btn-primary" @onclick="AddNewCustomer">Add New</button>
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Id</th>
				<th>First Name</th>
				<th>Last Name</th>
				<th>Email</th>
				<th>Phone Number</th>
				<th>Membership</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var customer in customerList)
			{
				<tr>
					<td>@customer.CustomerId</td>
					<td>@customer.CustomerFirst</td>
					<td>@customer.CustomerLast</td>
					<td>@customer.CustomerEmail</td>
					<td>@customer.CustomerPhone</td>
					<td>@customer.CustomerMember</td>
					<td>
						<button class="btn btn-info" @onclick=@(() => UpdateCustomer(customer))>Edit</button>
						<button class="btn btn-info" @onclick=@(() => DeleteCustomer(customer))>Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private IEnumerable<CustomerInfo> customerList;

	protected async override Task OnInitializedAsync()
	{
		customerList = await customerService.GetCustomerAsync();
	}

	public void AddNewCustomer()
	{
		navigationManager.NavigateTo("addupdatecustomer");
	}

	public void UpdateCustomer(CustomerInfo customerInfo)
	{
		navigationManager.NavigateTo($"updatecustomer/{customerInfo.CustomerId}");
	}

	public async void DeleteCustomer(CustomerInfo customerInfo)
	{
		await customerService.DeleteCustomerAsync(customerInfo.CustomerId);
		customerList = await customerService.GetCustomerAsync();
		this.StateHasChanged();
	}
}
